// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    password,
    access_token
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4
) RETURNING id, name, email, password, access_token, created_at, updated_at
`

type CreateUserParams struct {
	Name        string `db:"name" json:"name"`
	Email       string `db:"email" json:"email"`
	Password    string `db:"password" json:"password"`
	AccessToken string `db:"access_token" json:"access_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.AccessToken,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, access_token, created_at, updated_at FROM users WHERE email = ?1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*Users, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, access_token, created_at, updated_at FROM users WHERE id = ?1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (*Users, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    name = COALESCE(name, ?1),
    email = COALESCE(email, ?2),
    password = COALESCE(password, ?3),
    access_token = COALESCE(access_token, ?4),
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?5
RETURNING id, name, email, password, access_token, created_at, updated_at
`

type UpdateUserParams struct {
	Name        string `db:"name" json:"name"`
	Email       string `db:"email" json:"email"`
	Password    string `db:"password" json:"password"`
	AccessToken string `db:"access_token" json:"access_token"`
	ID          int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*Users, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.AccessToken,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
