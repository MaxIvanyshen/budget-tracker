// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package sqlc

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    user_id,
    amount,
    description,
    transaction_type,
    category,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?6
) RETURNING id, user_id, amount, description, transaction_type, created_at, updated_at, category
`

type CreateTransactionParams struct {
	UserID          int64     `db:"user_id" json:"user_id"`
	Amount          int64     `db:"amount" json:"amount"`
	Description     string    `db:"description" json:"description"`
	TransactionType int64     `db:"transaction_type" json:"transaction_type"`
	Category        *string   `db:"category" json:"category"`
	Date            time.Time `db:"date" json:"date"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg *CreateTransactionParams) (*Transactions, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.TransactionType,
		arg.Category,
		arg.Date,
	)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.TransactionType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
	)
	return &i, err
}

const deleteTransactionByIDAndUserID = `-- name: DeleteTransactionByIDAndUserID :exec
DELETE FROM transactions WHERE id = ?1 AND user_id = ?2
`

type DeleteTransactionByIDAndUserIDParams struct {
	ID     int64 `db:"id" json:"id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteTransactionByIDAndUserID(ctx context.Context, arg *DeleteTransactionByIDAndUserIDParams) error {
	_, err := q.exec(ctx, q.deleteTransactionByIDAndUserIDStmt, deleteTransactionByIDAndUserID, arg.ID, arg.UserID)
	return err
}

const getCategorySummaryByUserID = `-- name: GetCategorySummaryByUserID :many
SELECT 
    category,
    SUM(amount) as total_amount
FROM 
    transactions
WHERE 
    transaction_type = 2
    AND strftime('%m', updated_at) = strftime('%m', 'now')
    AND strftime('%Y', updated_at) = strftime('%Y', 'now')
    AND user_id = ?1
GROUP BY 
    category
ORDER BY 
    total_amount DESC
`

type GetCategorySummaryByUserIDRow struct {
	Category    *string  `db:"category" json:"category"`
	TotalAmount *float64 `db:"total_amount" json:"total_amount"`
}

func (q *Queries) GetCategorySummaryByUserID(ctx context.Context, userID int64) ([]*GetCategorySummaryByUserIDRow, error) {
	rows, err := q.query(ctx, q.getCategorySummaryByUserIDStmt, getCategorySummaryByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCategorySummaryByUserIDRow{}
	for rows.Next() {
		var i GetCategorySummaryByUserIDRow
		if err := rows.Scan(&i.Category, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestTransactionsByUserID = `-- name: GetLatestTransactionsByUserID :many
SELECT id, user_id, amount, description, transaction_type, created_at, updated_at, category FROM transactions WHERE user_id = ?1 ORDER BY updated_at DESC
`

func (q *Queries) GetLatestTransactionsByUserID(ctx context.Context, userID int64) ([]*Transactions, error) {
	rows, err := q.query(ctx, q.getLatestTransactionsByUserIDStmt, getLatestTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestTransactionsByUserIDAndTransactionType = `-- name: GetLatestTransactionsByUserIDAndTransactionType :many
SELECT id, user_id, amount, description, transaction_type, created_at, updated_at, category FROM transactions WHERE user_id = ?1 AND transaction_type = ?2 ORDER BY updated_at DESC
`

type GetLatestTransactionsByUserIDAndTransactionTypeParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetLatestTransactionsByUserIDAndTransactionType(ctx context.Context, arg *GetLatestTransactionsByUserIDAndTransactionTypeParams) ([]*Transactions, error) {
	rows, err := q.query(ctx, q.getLatestTransactionsByUserIDAndTransactionTypeStmt, getLatestTransactionsByUserIDAndTransactionType, arg.UserID, arg.TransactionType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyOverviewByUserID = `-- name: GetMonthlyOverviewByUserID :many
WITH months AS (
    SELECT 
        datetime('now', '-3 months', 'start of month') AS month_start
    UNION SELECT 
        datetime('now', '-2 months', 'start of month')
    UNION SELECT 
        datetime('now', '-1 month', 'start of month')
    UNION SELECT 
        datetime('now', 'start of month')
    UNION SELECT 
        datetime('now', '+1 month', 'start of month')
    UNION SELECT 
        datetime('now', '+2 months', 'start of month')
)

SELECT 
    strftime('%m', months.month_start) AS month_num,
    CASE 
        WHEN strftime('%m', months.month_start) = '01' THEN 'Jan'
        WHEN strftime('%m', months.month_start) = '02' THEN 'Feb'
        WHEN strftime('%m', months.month_start) = '03' THEN 'Mar'
        WHEN strftime('%m', months.month_start) = '04' THEN 'Apr'
        WHEN strftime('%m', months.month_start) = '05' THEN 'May'
        WHEN strftime('%m', months.month_start) = '06' THEN 'Jun'
        WHEN strftime('%m', months.month_start) = '07' THEN 'Jul'
        WHEN strftime('%m', months.month_start) = '08' THEN 'Aug'
        WHEN strftime('%m', months.month_start) = '09' THEN 'Sep'
        WHEN strftime('%m', months.month_start) = '10' THEN 'Oct'
        WHEN strftime('%m', months.month_start) = '11' THEN 'Nov'
        WHEN strftime('%m', months.month_start) = '12' THEN 'Dec'
    END AS month_name,
    COALESCE(SUM(CASE WHEN t.transaction_type = 1 THEN t.amount ELSE 0 END), 0) AS income,
    COALESCE(SUM(CASE WHEN t.transaction_type = 2 THEN t.amount ELSE 0 END), 0) AS expenses
FROM 
    months
LEFT JOIN 
    transactions t ON strftime('%Y-%m', t.updated_at) = strftime('%Y-%m', months.month_start)
WHERE 
    t.user_id = ?1
GROUP BY 
    month_num, month_name
ORDER BY 
    strftime('%Y-%m', months.month_start)
`

type GetMonthlyOverviewByUserIDRow struct {
	MonthNum  interface{} `db:"month_num" json:"month_num"`
	MonthName interface{} `db:"month_name" json:"month_name"`
	Income    interface{} `db:"income" json:"income"`
	Expenses  interface{} `db:"expenses" json:"expenses"`
}

func (q *Queries) GetMonthlyOverviewByUserID(ctx context.Context, userID int64) ([]*GetMonthlyOverviewByUserIDRow, error) {
	rows, err := q.query(ctx, q.getMonthlyOverviewByUserIDStmt, getMonthlyOverviewByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMonthlyOverviewByUserIDRow{}
	for rows.Next() {
		var i GetMonthlyOverviewByUserIDRow
		if err := rows.Scan(
			&i.MonthNum,
			&i.MonthName,
			&i.Income,
			&i.Expenses,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalBalanceByUserID = `-- name: GetTotalBalanceByUserID :one
SELECT SUM(CASE WHEN transaction_type = 1 THEN amount ELSE -amount END) AS total_balance FROM transactions WHERE user_id = ?1
`

func (q *Queries) GetTotalBalanceByUserID(ctx context.Context, userID int64) (*float64, error) {
	row := q.queryRow(ctx, q.getTotalBalanceByUserIDStmt, getTotalBalanceByUserID, userID)
	var total_balance *float64
	err := row.Scan(&total_balance)
	return total_balance, err
}

const getTotalBalanceForLastMonthByUserID = `-- name: GetTotalBalanceForLastMonthByUserID :one
SELECT SUM(CASE WHEN transaction_type = 1 THEN amount ELSE -amount END) AS total_balance FROM transactions WHERE user_id = ?1 AND strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now', '-1 month')
`

func (q *Queries) GetTotalBalanceForLastMonthByUserID(ctx context.Context, userID int64) (*float64, error) {
	row := q.queryRow(ctx, q.getTotalBalanceForLastMonthByUserIDStmt, getTotalBalanceForLastMonthByUserID, userID)
	var total_balance *float64
	err := row.Scan(&total_balance)
	return total_balance, err
}

const getTotalTransactionsByUserIDAndTransactionTypeForLastMonth = `-- name: GetTotalTransactionsByUserIDAndTransactionTypeForLastMonth :one
SELECT SUM(amount) FROM transactions WHERE user_id = ?1 AND transaction_type = ?2 AND strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now', '-1 month') ORDER BY updated_at DESC
`

type GetTotalTransactionsByUserIDAndTransactionTypeForLastMonthParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetTotalTransactionsByUserIDAndTransactionTypeForLastMonth(ctx context.Context, arg *GetTotalTransactionsByUserIDAndTransactionTypeForLastMonthParams) (*float64, error) {
	row := q.queryRow(ctx, q.getTotalTransactionsByUserIDAndTransactionTypeForLastMonthStmt, getTotalTransactionsByUserIDAndTransactionTypeForLastMonth, arg.UserID, arg.TransactionType)
	var sum *float64
	err := row.Scan(&sum)
	return sum, err
}

const getTotalTransactionsByUserIDAndTransactionTypeForThisMonth = `-- name: GetTotalTransactionsByUserIDAndTransactionTypeForThisMonth :one
SELECT SUM(amount) FROM transactions WHERE user_id = ?1 AND transaction_type = ?2 AND strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now') ORDER BY updated_at DESC
`

type GetTotalTransactionsByUserIDAndTransactionTypeForThisMonthParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetTotalTransactionsByUserIDAndTransactionTypeForThisMonth(ctx context.Context, arg *GetTotalTransactionsByUserIDAndTransactionTypeForThisMonthParams) (*float64, error) {
	row := q.queryRow(ctx, q.getTotalTransactionsByUserIDAndTransactionTypeForThisMonthStmt, getTotalTransactionsByUserIDAndTransactionTypeForThisMonth, arg.UserID, arg.TransactionType)
	var sum *float64
	err := row.Scan(&sum)
	return sum, err
}

const getTotalTransactionsThisYearByUserIDAndTransactionType = `-- name: GetTotalTransactionsThisYearByUserIDAndTransactionType :one
SELECT SUM(amount) FROM transactions WHERE user_id = ?1 AND transaction_type = ?2 AND strftime('%Y', created_at) = strftime('%Y', 'now') ORDER BY updated_at DESC
`

type GetTotalTransactionsThisYearByUserIDAndTransactionTypeParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetTotalTransactionsThisYearByUserIDAndTransactionType(ctx context.Context, arg *GetTotalTransactionsThisYearByUserIDAndTransactionTypeParams) (*float64, error) {
	row := q.queryRow(ctx, q.getTotalTransactionsThisYearByUserIDAndTransactionTypeStmt, getTotalTransactionsThisYearByUserIDAndTransactionType, arg.UserID, arg.TransactionType)
	var sum *float64
	err := row.Scan(&sum)
	return sum, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_id, amount, description, transaction_type, created_at, updated_at, category FROM transactions WHERE id = ?1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int64) (*Transactions, error) {
	row := q.queryRow(ctx, q.getTransactionByIDStmt, getTransactionByID, id)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.TransactionType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Category,
	)
	return &i, err
}

const getTransactionsByUserID = `-- name: GetTransactionsByUserID :many
SELECT id, user_id, amount, description, transaction_type, created_at, updated_at, category FROM transactions WHERE user_id = ?1
`

func (q *Queries) GetTransactionsByUserID(ctx context.Context, userID int64) ([]*Transactions, error) {
	rows, err := q.query(ctx, q.getTransactionsByUserIDStmt, getTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserIDAndTransactionType = `-- name: GetTransactionsByUserIDAndTransactionType :many
SELECT id, user_id, amount, description, transaction_type, created_at, updated_at, category FROM transactions WHERE user_id = ?1 AND transaction_type = ?2
`

type GetTransactionsByUserIDAndTransactionTypeParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetTransactionsByUserIDAndTransactionType(ctx context.Context, arg *GetTransactionsByUserIDAndTransactionTypeParams) ([]*Transactions, error) {
	rows, err := q.query(ctx, q.getTransactionsByUserIDAndTransactionTypeStmt, getTransactionsByUserIDAndTransactionType, arg.UserID, arg.TransactionType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsCountByUserIDAndTransactionType = `-- name: GetTransactionsCountByUserIDAndTransactionType :one
SELECT COUNT(*) FROM transactions WHERE user_id = ?1 AND transaction_type = ?2
`

type GetTransactionsCountByUserIDAndTransactionTypeParams struct {
	UserID          int64 `db:"user_id" json:"user_id"`
	TransactionType int64 `db:"transaction_type" json:"transaction_type"`
}

func (q *Queries) GetTransactionsCountByUserIDAndTransactionType(ctx context.Context, arg *GetTransactionsCountByUserIDAndTransactionTypeParams) (int64, error) {
	row := q.queryRow(ctx, q.getTransactionsCountByUserIDAndTransactionTypeStmt, getTransactionsCountByUserIDAndTransactionType, arg.UserID, arg.TransactionType)
	var count int64
	err := row.Scan(&count)
	return count, err
}
